name: Release

on:
  push:
    branches:
      - master
    paths:
      - '**.py'
  workflow_dispatch:
    inputs:
      dry-run:
        description: 'Dry run'
        required: false
        default: false
        type: boolean

jobs:
  lint:
    uses: ./.github/workflows/linting.yml
    name: Linting
  test:
    uses: ./.github/workflows/testing.yml
    name: Testing

  release:
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    name: Release
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - name: Getting code
        uses: actions/checkout@v3.1.0
      - name: Getting Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
      - name: Installing dependencies
        run: poetry install

      - name: Getting package clear version
        id: get_clear_version
        run: echo "clear_version=$(poetry version -s)" >> $GITHUB_OUTPUT

      - name: Get asset name
        id: get_asset_name
        run: echo "name=asset_name=$(ls dist | grep gz)" >> $GITHUB_OUTPUT

      - name: Make release and publish
        if: ${{ !inputs.dry-run }}
        run: make release USERNAME=${{ secrets.PYPI_USERNAME }} TOKEN=${{ secrets.PYPI_TOKEN }}

      - name: Create Release
        if: ${{ !inputs.dry-run }}
        id: create_release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_clear_version.outputs.clear_version }}
          release_name: ${{ steps.get_version.outputs.version }}
          draft: false
          prerelease: false

      - name: Upload Release assets
        if: ${{ !inputs.dry-run }}
        id: upload_gz
        uses: actions/upload-release-asset@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/${{ steps.get_asset_name.outputs.asset_name }}
          asset_name: ${{ steps.get_asset_name.outputs.asset_name }}
          asset_content_type: application/tar+gzip
